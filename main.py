import re
import asyncio
import logging
import json
import os
import html
import csv
import copy
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from telethon import TelegramClient, events
from telethon.errors import (
    SessionPasswordNeededError,
    PhoneNumberInvalidError,
    PhoneCodeInvalidError,
    PhoneCodeExpiredError,
    FloodWaitError
)
from yookassa import Payment, Configuration
from pymorphy3 import MorphAnalyzer
import snowballstemmer
import uuid

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

API_TOKEN = "7930844421:AAFKC9cUVVdttJHa3fpnUSnAWgr8Wa6-wPE"
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ÆKassa configuration
YOOKASSA_SHOP_ID = os.getenv("YOOKASSA_SHOP_ID")
YOOKASSA_TOKEN = os.getenv("YOOKASSA_TOKEN")
PRO_PRICE = "1990.00"
RETURN_URL = "https://t.me/TOPGrabber_bot"
if YOOKASSA_SHOP_ID and YOOKASSA_TOKEN:
    Configuration.account_id = YOOKASSA_SHOP_ID
    Configuration.secret_key = YOOKASSA_TOKEN

# –•—Ä–∞–Ω–∏–ª–∏—â–µ Telethon-–∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
user_clients = {}  # runtime data: {user_id: {"client": TelegramClient,
# "phone": str, "phone_hash": str,
# "parsers": list,  # each item {'chats': list, 'keywords': list}
# "task": asyncio.Task}}

DATA_FILE = "user_data.json"
TEXT_FILE = "texts.json"

with open(TEXT_FILE, "r", encoding="utf-8") as f:
    TEXTS = json.load(f)

# Maximum number of chats allowed for PRO plan
CHAT_LIMIT = 5

# Morphological analysis utilities
morph = MorphAnalyzer()
stemmer_en = snowballstemmer.stemmer("english")

def normalize_word(word: str) -> str:
    """Return normalized form for keyword matching."""
    word = word.lower()
    if re.search("[–∞-—è–ê-–Ø]", word):
        return morph.parse(word)[0].normal_form
    return stemmer_en.stemWord(word)

def t(key, **kwargs):
    text = TEXTS.get(key, key)
    if kwargs:
        try:
            text = text.format(**kwargs)
        except Exception:
            pass
    return text

def load_user_data():
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
            for u in data.values():
                u.setdefault('subscription_expiry', 0)
                u.setdefault('recurring', False)
                u.setdefault('reminder3_sent', False)
                u.setdefault('reminder1_sent', False)
                u.setdefault('inactive_notified', False)
                u.setdefault('used_promos', [])
                for p in u.get('parsers', []):
                    p.setdefault('results', [])
                    p.setdefault('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                    p.setdefault('api_id', '')
                    p.setdefault('api_hash', '')
            return data
        except Exception:
            logging.exception("Failed to load user data")
    return {}


def save_user_data(data):
    try:
        data_copy = copy.deepcopy(data)
        for u in data_copy.values():
            for p in u.get('parsers', []):
                p.pop('handler', None)
                p.pop('event', None)
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(data_copy, f, ensure_ascii=False, indent=2)
    except Exception:
        logging.exception("Failed to save user data")


user_data = load_user_data()  # persistent data: {str(user_id): {...}}

def create_pro_payment(user_id: int):
    if not (YOOKASSA_SHOP_ID and YOOKASSA_TOKEN):
        return None, None
    try:
        payment = Payment.create(
            {
                "amount": {"value": PRO_PRICE, "currency": "RUB"},
                "confirmation": {"type": "redirect", "return_url": RETURN_URL},
                "description": f"–ü–æ–¥–ø–∏—Å–∫–∞ PRO –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}",
            },
            str(uuid.uuid4()),
        )
        return payment.id, payment.confirmation.confirmation_url
    except Exception:
        logging.exception("Failed to create payment")
    return None, None

def check_pro_payment(payment_id: str):
    try:
        payment = Payment.find_one(payment_id)
        return payment.status
    except Exception:
        logging.exception("Failed to check payment")
    return None

def check_subscription(user_id: int):
    data = user_data.get(str(user_id))
    if not data:
        return
    exp = data.get('subscription_expiry', 0)
    now = int(datetime.utcnow().timestamp())
    days_left = (exp - now) // 86400
    if exp and days_left <= 0:
        if not data.get('inactive_notified'):
            # send last results and mark notified
            asyncio.create_task(send_all_results(user_id))
            asyncio.create_task(bot.send_message(user_id, t('subscription_inactive')))
            data['inactive_notified'] = True
            save_user_data(user_data)
        return
    if not data.get('recurring'):
        if days_left == 3 and not data.get('reminder3_sent'):
            asyncio.create_task(bot.send_message(user_id, t('subscription_reminder', days=3)))
            data['reminder3_sent'] = True
        elif days_left == 1 and not data.get('reminder1_sent'):
            asyncio.create_task(bot.send_message(user_id, t('subscription_reminder', days=1)))
            data['reminder1_sent'] = True
        if data.get('reminder3_sent') or data.get('reminder1_sent'):
            save_user_data(user_data)


# –¢–µ–∫—Å—Ç –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
INFO_TEXT = (
    "TopGrabber ‚Äì —ç—Ç–æ —Å–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤"
    " –≤ —á–∞—Ç–∞—Ö Telegram. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞, —É–∫–∞–∑–∞–≤ –Ω—É–∂–Ω—ã–µ "
    "–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ —á–∞—Ç—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ö–æ—Ç–∏—Ç–µ –∏—Å–∫–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤. –ù–∞—à –±–æ—Ç"
    " —É–≤–µ–¥–æ–º–∏—Ç –≤–∞—Å –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.\n"
    "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∫ –±–æ—Ç—É (https://dzen.ru/a/ZuHH1h_M5kqcam1A)\n"
    "–ë–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π (https://t.me/TOPGrabber_bot)\n\n"
    "–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤ - 5—à—Ç\n"
    "–¶–µ–Ω–∞:\n1 990‚ÇΩ/ 30 –¥–Ω–µ–π\n"
    "–ö—É–ø–∏—Ç—å 1 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —á–∞—Ç:\n490‚ÇΩ/ 30 –¥–Ω–µ–π\n\n"
    "Copyright ¬© 2024 TOPGrabberbot ‚Äî AI-–ü–∞—Ä—Å–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π | "
    "–ò–ü –ê–Ω—Ç—É—Ñ—å–µ–≤ –ë.–í. (https://telegra.ph/Rekvizity-08-20-2) "
    "–û–ì–†–ù 304770000133140 –ò–ù–ù 026408848802 | "
    "–ü—É–±–ª–∏—á–Ω–∞—è –æ—Ñ–µ—Ä—Ç–∞ (https://telegra.ph/Publichnaya-oferta-09-11)"
)

# –¢–µ–∫—Å—Ç –¥–ª—è –ø–æ–º–æ—â–∏
HELP_TEXT = (
    "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –∏–∑—É—á–∏—Ç–µ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∫ –±–æ—Ç—É "
    "(https://dzen.ru/a/ZuHH1h_M5kqcam1A) –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: "
    "https://t.me/+PqfIWqHquts4YjQy"
)


async def start_monitor(user_id: int, parser: dict):
    info = user_clients.get(user_id)
    if not info:
        return
    client = info['client']
    chat_ids = parser.get('chats')
    keywords = parser.get('keywords')
    exclude = [normalize_word(w) for w in parser.get('exclude_keywords', [])]
    if not chat_ids or not keywords:
        return

    event_builder = events.NewMessage(chats=chat_ids)

    async def monitor(event, keywords=keywords, parser=parser):
        sender = await event.get_sender()
        if getattr(sender, 'bot', False):
            return
        text = event.raw_text or ''
        words = [normalize_word(w) for w in re.findall(r'\w+', text.lower())]
        for kw in keywords:
            if normalize_word(kw) in words and not any(e in words for e in exclude):
                chat = await event.get_chat()
                title = getattr(chat, 'title', str(event.chat_id))
                username = getattr(sender, 'username', None)
                sender_name = f"@{username}" if username else getattr(sender, 'first_name', 'Unknown')
                msg_time = event.message.date.strftime('%Y-%m-%d %H:%M:%S')
                link = '–°—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'
                chat_username = getattr(chat, 'username', None)
                if chat_username:
                    link = f"https://t.me/{chat_username}/{event.id}"
                preview = html.escape(text[:400])
                await bot.send_message(
                    user_id,
                    f"üîî –ù–∞–π–¥–µ–Ω–æ '{html.escape(kw)}' –≤ —á–∞—Ç–µ '{html.escape(title)}'\n"
                    f"Username: {html.escape(sender_name)}\n"
                    f"DateTime: {msg_time}\n"
                    f"Link: {html.escape(link)}\n"
                    f"<pre>{preview}</pre>",
                    parse_mode="HTML",
                )
                parser.setdefault('results', []).append({
                    'keyword': kw,
                    'chat': title,
                    'sender': sender_name,
                    'datetime': msg_time,
                    'link': link,
                    'text': text,
                })
                save_user_data(user_data)
                break

    client.add_event_handler(monitor, event_builder)
    parser['handler'] = monitor
    parser['event'] = event_builder
    if not client.is_connected():
        await client.connect()
    if 'task' not in info:
        info['task'] = asyncio.create_task(client.run_until_disconnected())

def stop_monitor(user_id: int, parser: dict):
    info = user_clients.get(user_id)
    if not info:
        return
    handler = parser.get('handler')
    event = parser.get('event')
    if handler and event:
        try:
            info['client'].remove_event_handler(handler, event)
        except Exception:
            pass
    parser.pop('handler', None)
    parser.pop('event', None)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
class AuthStates(StatesGroup):
    waiting_api_id = State()
    waiting_api_hash = State()
    waiting_phone = State()
    waiting_code = State()
    waiting_password = State()
    waiting_chats = State()
    waiting_keywords = State()


class PromoStates(StatesGroup):
    waiting_promo = State()


class ParserStates(StatesGroup):
    waiting_name = State()
    waiting_chats = State()
    waiting_keywords = State()
    waiting_account_api_id = State()
    waiting_account_api_hash = State()


class EditParserStates(StatesGroup):
    waiting_chats = State()
    waiting_keywords = State()
    waiting_exclude = State()
    waiting_name = State()
    waiting_account_api_id = State()
    waiting_account_api_hash = State()


class ExpandProStates(StatesGroup):
    """States for expanding PRO plan."""
    waiting_chats = State()
    waiting_confirm = State()


@dp.message_handler(commands=["help"])
async def cmd_help(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."""
    await message.answer("[[–ö–∞–∫ –Ω–∞—á–∞—Ç—å]]\n[[FAQ]]\nhttps://t.me/+PqfIWqHquts4YjQy")


@dp.message_handler(commands=['enable_recurring'])
async def enable_recurring(message: types.Message):
    data = user_data.setdefault(str(message.from_user.id), {})
    data['recurring'] = True
    save_user_data(user_data)
    await message.answer(t('recurring_enabled'))


@dp.message_handler(commands=['disable_recurring'])
async def disable_recurring(message: types.Message):
    data = user_data.setdefault(str(message.from_user.id), {})
    data['recurring'] = False
    save_user_data(user_data)
    await message.answer(t('recurring_disabled'))


@dp.message_handler(commands=['info'])
async def cmd_info(message: types.Message):
    data = user_data.get(str(message.from_user.id))
    if not data:
        await message.answer("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")
        return
    parsers = data.get('parsers') or []
    if not parsers:
        await message.answer("–ü–∞—Ä—Å–µ—Ä—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.")
        return
    lines = []
    for idx, p in enumerate(parsers, 1):
        name = p.get('name', f'–ü–∞—Ä—Å–µ—Ä {idx}')
        chats = p.get('chats') or []
        kws = p.get('keywords') or []
        api_id = p.get('api_id', '')
        lines.append(
            f"#{idx} {name}\nAPI ID: {api_id}\n–ß–∞—Ç—ã: {chats}\n–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(kws)}"
        )
    await message.answer("\n\n".join(lines))


def main_menu_keyboard() -> types.InlineKeyboardMarkup:
    kb = types.InlineKeyboardMarkup(row_width=1)
    kb.add(
        types.InlineKeyboardButton(
            "üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –æ–ø–ª–∞—Ç–∞ –ø–∞—Ä—Å–µ—Ä–æ–≤", callback_data="menu_setup"
        ),
        types.InlineKeyboardButton(
            "üì§ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É", callback_data="menu_export"
        ),
        types.InlineKeyboardButton(
            "üìö –ü–æ–º–æ—â—å –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", callback_data="menu_help"
        ),
        types.InlineKeyboardButton(
            "ü§ù –ü—Ä–æ—Ñ–∏–ª—å –∏ –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data="menu_profile"
        ),
    )
    return kb


def parser_settings_keyboard(idx: int) -> types.InlineKeyboardMarkup:
    kb = types.InlineKeyboardMarkup(row_width=1)
    kb.add(
        types.InlineKeyboardButton(
            "üõ† –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_name_{idx}"
        ),
        types.InlineKeyboardButton(
            "üìÇ –ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Ç—ã", callback_data=f"edit_chats_{idx}"
        ),
        types.InlineKeyboardButton(
            "üìÇ –ò–∑–º–µ–Ω–∏—Ç—å —Å–ª–æ–≤–∞", callback_data=f"edit_keywords_{idx}"
        ),
        types.InlineKeyboardButton(
            "üìÇ –ò–∑–º–µ–Ω–∏—Ç—å –∏—Å–∫–ª-—Å–ª–æ–≤–∞", callback_data=f"edit_exclude_{idx}"
        ),
        types.InlineKeyboardButton(
            "üõ† –ò–∑–º–µ–Ω–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç-–ø–∞—Ä—Å–µ—Ä", callback_data=f"edit_account_{idx}"
        ),
        types.InlineKeyboardButton(
            "üí≥ –¢–∞—Ä–∏—Ñ –∏ –æ–ø–ª–∞—Ç–∞", callback_data=f"edit_tariff_{idx}"
        ),
    )
    kb.add(
        types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_main")
    )
    return kb


def parser_info_text(user_id: int, parser: dict, created: bool = False) -> str:
    idx = parser.get('id') or 1
    name = parser.get('name', f'–ü–∞—Ä—Å–µ—Ä_{idx}')
    chat_count = len(parser.get('chats', []))
    include_count = len(parser.get('keywords', []))
    exclude_count = len(parser.get('exclude_keywords', []))
    account_label = parser.get('api_id') or '–Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω'
    data = user_data.get(str(user_id), {})
    plan_name = 'PRO'
    if data.get('subscription_expiry'):
        paid_to = datetime.utcfromtimestamp(data['subscription_expiry']).strftime('%Y-%m-%d')
    else:
        paid_to = '‚Äî'
    chat_limit = f'/{CHAT_LIMIT}' if plan_name == 'PRO' else ''
    status_emoji = 'üü¢' if parser.get('handler') else '‚è∏'
    status_text = '–ê–∫—Ç–∏–≤–µ–Ω' if parser.get('handler') else '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
    if created:
        return t('parser_created', id=idx)
    return t(
        'parser_info',
        name=name,
        id=idx,
        chat_count=chat_count,
        chat_limit=chat_limit,
        include_count=include_count,
        exclude_count=exclude_count,
        account_label=account_label,
        plan_name=plan_name,
        paid_to=paid_to,
        status_emoji=status_emoji,
        status_text=status_text,
    )


@dp.message_handler(commands=['start'], state="*")
async def cmd_start(message: types.Message, state: FSMContext):
    await state.finish()
    check_subscription(message.from_user.id)
    data = user_data.setdefault(str(message.from_user.id), {})
    if not data.get('started'):
        data['started'] = True
        save_user_data(user_data)
    await message.answer(t('welcome'), reply_markup=main_menu_keyboard())


@dp.message_handler(commands=['menu'], state="*")
async def cmd_menu(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer(t('menu_main'), reply_markup=main_menu_keyboard())


@dp.message_handler(commands=['result'])
async def cmd_result(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç–∞–±–ª–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."""
    await send_all_results(message.from_user.id)


@dp.message_handler(commands=['clear_result'])
async def cmd_clear_result(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç–∞–±–ª–∏—Ü—É –∏ –æ—á–∏—Å—Ç–∏—Ç—å –µ—ë."""
    await send_all_results(message.from_user.id)
    data = user_data.get(str(message.from_user.id))
    if data:
        for parser in data.get('parsers', []):
            parser['results'] = []
        save_user_data(user_data)


@dp.message_handler(commands=['delete_card'])
async def cmd_delete_card(message: types.Message):
    """–£–¥–∞–ª–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    data = user_data.get(str(message.from_user.id))
    if data:
        data.pop('card', None)
        save_user_data(user_data)
    await message.answer("–î–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã —É–¥–∞–ª–µ–Ω—ã.")


@dp.message_handler(commands=['delete_parser'])
async def cmd_delete_parser(message: types.Message):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞."""
    data = user_data.get(str(message.from_user.id))
    if not data:
        await message.answer("–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    parsers = [
        (idx, p)
        for idx, p in enumerate(data.get('parsers', []))
        if not p.get('paid')
    ]
    if not parsers:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    kb = types.InlineKeyboardMarkup(row_width=1)
    for idx, p in parsers:
        name = p.get('name', f'–ü–∞—Ä—Å–µ—Ä {idx+1}')
        kb.add(types.InlineKeyboardButton(name, callback_data=f'delp_select_{idx}'))
    kb.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_main"))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—Å–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)


@dp.callback_query_handler(lambda c: c.data.startswith('delp_select_'))
async def cb_delp_select(call: types.CallbackQuery):
    idx = int(call.data.split('_')[2])
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.add(
        types.InlineKeyboardButton("–ù–µ—Ç", callback_data='delp_cancel'),
        types.InlineKeyboardButton("–î–∞", callback_data=f'delp_confirm_{idx}')
    )
    await call.message.answer("–£–¥–∞–ª–∏—Ç—å –ø–∞—Ä—Å–µ—Ä?", reply_markup=kb)
    await call.answer()


@dp.callback_query_handler(lambda c: c.data == 'delp_cancel')
async def cb_delp_cancel(call: types.CallbackQuery):
    await call.message.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await call.message.answer(t('menu_main'), reply_markup=main_menu_keyboard())
    await call.answer()


@dp.callback_query_handler(lambda c: c.data.startswith('delp_confirm_'))
async def cb_delp_confirm(call: types.CallbackQuery):
    idx = int(call.data.split('_')[2])
    user_id = call.from_user.id
    await send_parser_results(user_id, idx)
    data = user_data.get(str(user_id))
    if data and 0 <= idx < len(data.get('parsers', [])):
        parser = data['parsers'][idx]
        if parser.get('paid'):
            await call.message.answer("–û–ø–ª–∞—á–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å.")
            await call.answer()
            return
        stop_monitor(user_id, parser)
        data['parsers'].pop(idx)
        save_user_data(user_data)
        await call.message.answer("–ü–∞—Ä—Å–µ—Ä —É–¥–∞–ª—ë–Ω.")
    await call.message.answer(t('menu_main'), reply_markup=main_menu_keyboard())
    await call.answer()


@dp.callback_query_handler(lambda c: c.data == 'back_main')
async def cb_back_main(call: types.CallbackQuery):
    await call.message.answer(t('menu_main'), reply_markup=main_menu_keyboard())
    await call.answer()


@dp.callback_query_handler(lambda c: c.data == 'menu_setup')
async def cb_menu_setup(call: types.CallbackQuery):
    kb = types.InlineKeyboardMarkup(row_width=1)
    kb.add(
        types.InlineKeyboardButton("üöÄ –ù–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä", callback_data="setup_new"),
        types.InlineKeyboardButton("‚úèÔ∏è –ú–æ–∏ –ø–∞—Ä—Å–µ—Ä—ã", callback_data="setup_list"),
        types.InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∞", callback_data="setup_pay"),
        types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_main"),
    )
    await call.message.answer(t('menu_setup'), reply_markup=kb)
    await call.answer()


@dp.callback_query_handler(lambda c: c.data == 'setup_new')
async def cb_setup_new(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    await cmd_add_parser(call.message, state)


@dp.callback_query_handler(lambda c: c.data == 'setup_list')
async def cb_setup_list(call: types.CallbackQuery):
    await cb_active_parsers(call)


@dp.callback_query_handler(lambda c: c.data == 'setup_pay')
async def cb_setup_pay(call: types.CallbackQuery, state: FSMContext):
    """Show list of parsers for payment actions."""
    data = user_data.get(str(call.from_user.id))
    if not data or not data.get('parsers'):
        await call.message.answer("–ü–∞—Ä—Å–µ—Ä—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.")
        await call.answer()
        return
    kb = types.InlineKeyboardMarkup(row_width=1)
    for idx, p in enumerate(data.get('parsers'), 1):
        name = p.get('name', f'–ü–∞—Ä—Å–µ—Ä {idx}')
        kb.add(types.InlineKeyboardButton(name, callback_data=f'pay_select_{idx-1}'))
    kb.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_setup"))
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—Å–µ—Ä:", reply_markup=kb)
    await call.answer()


@dp.callback_query_handler(lambda c: c.data.startswith('pay_select_'))
async def cb_pay_select(call: types.CallbackQuery):
    """Show payment options for selected parser."""
    idx = int(call.data.split('_')[2])
    kb = types.InlineKeyboardMarkup(row_width=1)
    kb.add(
        types.InlineKeyboardButton("–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data=f'pay_renew_{idx}'),
        types.InlineKeyboardButton("–†–∞—Å—à–∏—Ä–∏—Ç—å Pro", callback_data=f'pay_expand_{idx}'),
        types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ Infinity", callback_data=f'pay_infinity_{idx}'),
        types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='setup_pay'),
    )
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)
    await call.answer()


@dp.callback_query_handler(lambda c: c.data.startswith('pay_renew_'))
async def cb_pay_renew(call: types.CallbackQuery, state: FSMContext):
    """Renew PRO subscription."""
    await _process_tariff_pro(call.message, state)
    await call.answer()


@dp.callback_query_handler(lambda c: c.data.startswith('pay_expand_'))
async def cb_pay_expand(call: types.CallbackQuery, state: FSMContext):
    """Start process to expand PRO plan chats."""
    idx = int(call.data.split('_')[2])
    await state.update_data(expand_idx=idx)
    await call.message.answer("–°–∫–æ–ª—å–∫–æ —á–∞—Ç–æ–≤ –≤–∞–º –Ω—É–∂–Ω–æ?")
    await ExpandProStates.waiting_chats.set()
    await call.answer()


@dp.callback_query_handler(lambda c: c.data.startswith('pay_infinity_'))
async def cb_pay_infinity(call: types.CallbackQuery):
    """Inform about INFINITY plan."""
    await call.message.answer(
        "–¢–∞—Ä–∏—Ñ INFINITY ‚Äî 149 990 ‚ÇΩ/–º–µ—Å. –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ —á–∞—Ç—ã –∏ —Å–ª–æ–≤–∞, –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä.\n"
        "–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ @TopGrabberSupport"
    )
    await call.answer()


@dp.message_handler(state=ExpandProStates.waiting_chats)
async def expand_pro_chats(message: types.Message, state: FSMContext):
    """Handle number of chats for PRO expansion."""
    text = message.text.strip()
    if not text.isdigit() or int(text) <= 0:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤ —á–∏—Å–ª–æ–º")
        return
    chats = int(text)
    price = 1990 + max(0, chats - 5) * 490
    await state.update_data(chats=chats, price=price)
    kb = types.InlineKeyboardMarkup(row_width=1)
    kb.add(
        types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data='expand_confirm'),
        types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='expand_cancel'),
        types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='expand_back'),
    )
    await message.answer(
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–∞—Ä–∏—Ñ–∞ PRO –Ω–∞ {chats} —á–∞—Ç–æ–≤ —Å–æ—Å—Ç–∞–≤–∏—Ç {price} ‚ÇΩ/–º–µ—Å. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É?",
        reply_markup=kb,
    )
    await ExpandProStates.waiting_confirm.set()


@dp.callback_query_handler(lambda c: c.data == 'expand_confirm', state=ExpandProStates.waiting_confirm)
async def cb_expand_confirm(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    price = data.get('price')
    chats = data.get('chats')
    await call.message.answer(
        f"–î–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–æ {chats} —á–∞—Ç–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å {price} ‚ÇΩ. \n–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: @TopGrabberSupport",
    )
    await state.finish()
    await call.answer()


@dp.callback_query_handler(lambda c: c.data == 'expand_cancel', state=ExpandProStates.waiting_confirm)
async def cb_expand_cancel(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.finish()
    await call.answer()


@dp.callback_query_handler(lambda c: c.data == 'expand_back', state=ExpandProStates.waiting_confirm)
async def cb_expand_back(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer("–°–∫–æ–ª—å–∫–æ —á–∞—Ç–æ–≤ –≤–∞–º –Ω—É–∂–Ω–æ?")
    await ExpandProStates.waiting_chats.set()
    await call.answer()


@dp.callback_query_handler(lambda c: c.data == 'menu_export')
async def cb_menu_export(call: types.CallbackQuery):
    kb = types.InlineKeyboardMarkup(row_width=1)
    kb.add(
        types.InlineKeyboardButton("üì§ –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç", callback_data="export_all"),
        types.InlineKeyboardButton("üìÇ –í—ã–±—Ä–∞—Ç—å –ø–∞—Ä—Å–µ—Ä", callback_data="export_choose"),
        types.InlineKeyboardButton("üîî –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="export_alert"),
        types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_main"),
    )
    await call.message.answer(t('menu_export'), reply_markup=kb)
    await call.answer()


@dp.callback_query_handler(lambda c: c.data == 'export_all')
async def cb_export_all(call: types.CallbackQuery):
    await send_all_results(call.from_user.id)
    await call.message.answer(t('menu_main'), reply_markup=main_menu_keyboard())
    await call.answer()


@dp.callback_query_handler(lambda c: c.data == 'export_choose')
async def cb_export_choose(call: types.CallbackQuery):
    await cb_result(call)


@dp.callback_query_handler(lambda c: c.data == 'export_alert')
async def cb_export_alert(call: types.CallbackQuery):
    link = f"https://t.me/TopGrabberAlertBot?start={call.from_user.id}"
    await call.message.answer(
        "–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∞–ª–µ—Ä—Ç-–±–æ—Ç ‚Äî –∏ –Ω–æ–≤—ã–µ –ª–∏–¥—ã –±—É–¥—É—Ç –ø—Ä–∏–ª–µ—Ç–∞—Ç—å –ø—Ä—è–º–æ –≤ Telegram —Å —Ç–µ–∫—Å—Ç–æ–º –∑–∞–ø—Ä–æ—Å–∞, —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∞–≤—Ç–æ—Ä–æ–º.\n"
        f"{link}"
    )
    await call.answer()


@dp.callback_query_handler(lambda c: c.data == 'menu_help')
async def cb_menu_help(call: types.CallbackQuery):
    kb = types.InlineKeyboardMarkup(row_width=1)
    kb.add(
        types.InlineKeyboardButton("‚ùì –ö–∞–∫ –Ω–∞—á–∞—Ç—å", callback_data="help_start"),
        types.InlineKeyboardButton("üßë‚Äçüíª –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="help_support"),
        types.InlineKeyboardButton("üìÑ –û –Ω–∞—Å", callback_data="help_about"),
        types.InlineKeyboardButton("üöÄ –ù–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä", callback_data="setup_new"),
        types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_main"),
    )
    await call.message.answer(t('menu_help'), reply_markup=kb)
    await call.answer()


@dp.callback_query_handler(lambda c: c.data == 'help_start')
async def cb_help_start(call: types.CallbackQuery):
    await cmd_help(call.message)
    await call.answer()


@dp.callback_query_handler(lambda c: c.data == 'help_support')
async def cb_help_support(call: types.CallbackQuery):
    await call.message.answer("–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: https://t.me/TopGrabberSupport")
    await call.answer()


@dp.callback_query_handler(lambda c: c.data == 'help_about')
async def cb_help_about(call: types.CallbackQuery):
    await cb_info(call)


@dp.callback_query_handler(lambda c: c.data == 'menu_profile')
async def cb_menu_profile(call: types.CallbackQuery):
    data = user_data.get(str(call.from_user.id), {})
    now = int(datetime.utcnow().timestamp())
    if data.get('subscription_expiry', 0) > now:
        plan_name = 'PRO'
        paid_to = datetime.utcfromtimestamp(data['subscription_expiry']).strftime('%Y-%m-%d')
    else:
        plan_name = '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏'
        paid_to = '‚Äî'
    rec_status = 'üîÅ' if data.get('recurring') else ''
    text = t(
        'menu_profile',
        user_id=call.from_user.id,
        username=call.from_user.username or '',
        plan_name=plan_name,
        paid_to=paid_to,
        rec_status=rec_status,
        promo_code=data.get('promo_code', 'N/A'),
        ref_count=data.get('ref_count', 0),
        ref_active_users=data.get('ref_active_users', 0),
        ref_month_income=data.get('ref_month_income', 0),
        ref_total=data.get('ref_total', 0),
        ref_balance=data.get('ref_balance', 0),
    )
    kb = types.InlineKeyboardMarkup(row_width=1)
    kb.add(
        types.InlineKeyboardButton(
            "üí≥ –û–ø–ª–∞—Ç–∞ —Å –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞", callback_data="profile_paybalance"
        ),
        types.InlineKeyboardButton(
            "üí∏ –í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞", callback_data="profile_withdraw"
        ),
        types.InlineKeyboardButton(
            "‚õîÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç—É", callback_data="profile_delete_card"
        ),
        types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_main"),
    )
    await call.message.answer(text, reply_markup=kb)
    await call.answer()


@dp.callback_query_handler(lambda c: c.data == 'profile_paybalance')
async def cb_profile_paybalance(call: types.CallbackQuery):
    await call.message.answer("–§—É–Ω–∫—Ü–∏—è –æ–ø–ª–∞—Ç—ã —Å –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
    await call.answer()


@dp.callback_query_handler(lambda c: c.data == 'profile_withdraw')
async def cb_profile_withdraw(call: types.CallbackQuery):
    await call.message.answer("–§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
    await call.answer()


@dp.callback_query_handler(lambda c: c.data == 'profile_delete_card')
async def cb_profile_delete_card(call: types.CallbackQuery):
    await call.message.answer("–î–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã —É–¥–∞–ª–µ–Ω—ã.")
    await call.answer()


async def _process_tariff_pro(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    data = user_data.get(str(user_id))
    if data and data.get('subscription_expiry', 0) > int(datetime.utcnow().timestamp()):
        await cmd_add_parser(message, state)
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.",
        reply_markup=markup,
    )
    await PromoStates.waiting_promo.set()


@dp.callback_query_handler(lambda c: c.data == 'tariff_pro')
async def cb_tariff_pro(call: types.CallbackQuery, state: FSMContext):
    await _process_tariff_pro(call.message, state)
    await call.answer()


@dp.message_handler(commands=['tariff_pro'])
async def cmd_tariff_pro(message: types.Message, state: FSMContext):
    await _process_tariff_pro(message, state)


@dp.message_handler(state=PromoStates.waiting_promo)
async def promo_entered(message: types.Message, state: FSMContext):
    code = message.text.strip().upper()
    user_id = message.from_user.id
    data = user_data.setdefault(str(user_id), {})
    used_promos = data.setdefault('used_promos', [])
    if code in used_promos:
        await message.answer(
            t('promo_already_used'),
            reply_markup=types.ReplyKeyboardRemove(),
        )
        await state.finish()
        return
    if code == 'DEMO':
        expiry = int((datetime.utcnow() + timedelta(days=7)).timestamp())
        data['subscription_expiry'] = expiry
        used_promos.append(code)
        save_user_data(user_data)
        await message.answer(
            "–ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–Ω—è—Ç! –í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ 7 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ PRO.",
            reply_markup=types.ReplyKeyboardRemove(),
        )
        await state.finish()
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
        return

    await message.answer(
        "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã —Ç–∞—Ä–∏—Ñ–∞ PRO.",
        reply_markup=types.ReplyKeyboardRemove(),
    )
    payment_id, url = create_pro_payment(user_id)
    if not payment_id:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç—ë–∂. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    else:
        user_data.setdefault(str(user_id), {})['payment_id'] = payment_id
        save_user_data(user_data)
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å", url=url))
        await message.answer(
            "–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–∞—Ä–∏—Ñ–∞ –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –∑–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /check_payment.",
            reply_markup=kb,
        )
    await state.finish()


@dp.callback_query_handler(lambda c: c.data == 'result')
async def cb_result(call: types.CallbackQuery):
    data = user_data.get(str(call.from_user.id))
    if not data or not data.get('parsers'):
        await call.message.answer("–ü–∞—Ä—Å–µ—Ä—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.")
        await call.answer()
        return
    kb = types.InlineKeyboardMarkup(row_width=1)
    for idx, p in enumerate(data.get('parsers'), 1):
        name = p.get('name', f'–ü–∞—Ä—Å–µ—Ä {idx}')
        kb.add(types.InlineKeyboardButton(name, callback_data=f"csv_{idx}"))
    kb.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_main"))
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—Å–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è CSV:", reply_markup=kb)
    await call.answer()


@dp.callback_query_handler(lambda c: c.data == 'help_info')
async def cb_help(call: types.CallbackQuery):
    await call.message.answer(HELP_TEXT)
    await call.answer()


@dp.callback_query_handler(lambda c: c.data == 'info')
async def cb_info(call: types.CallbackQuery):
    await call.message.answer(INFO_TEXT)
    await call.answer()


@dp.callback_query_handler(lambda c: c.data == 'active_parsers')
async def cb_active_parsers(call: types.CallbackQuery):
    data = user_data.get(str(call.from_user.id))
    if not data or not data.get('parsers'):
        await call.message.answer("–ü–∞—Ä—Å–µ—Ä—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.")
        await call.answer()
        return
    kb = types.InlineKeyboardMarkup(row_width=1)
    for idx, p in enumerate(data.get('parsers'), 1):
        name = p.get('name', f'–ü–∞—Ä—Å–µ—Ä {idx}')
        kb.add(types.InlineKeyboardButton(name, callback_data=f"edit_{idx}"))
    kb.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_main"))
    await call.message.answer("–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä—Å–µ—Ä—ã:", reply_markup=kb)
    await call.answer()


@dp.callback_query_handler(lambda c: c.data.startswith('csv_'))
async def cb_send_csv(call: types.CallbackQuery):
    idx = int(call.data.split('_')[1]) - 1
    user_id = call.from_user.id
    check_subscription(user_id)
    data = user_data.get(str(user_id))
    if not data:
        await call.message.answer("–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        await call.answer()
        return
    parsers = data.get('parsers', [])
    if idx < 0 or idx >= len(parsers):
        await call.message.answer("–ü–∞—Ä—Å–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await call.answer()
        return
    parser = parsers[idx]
    results = parser.get('results', [])
    if not results:
        await call.message.answer("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞.")
        await call.answer()
        return
    path = f"results_{user_id}_{idx+1}.csv"
    with open(path, 'w', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow(["keyword", "chat", "sender", "datetime", "link", "text"])
        for r in results:
            writer.writerow([
                r.get('keyword', ''),
                r.get('chat', ''),
                r.get('sender', ''),
                r.get('datetime', ''),
                r.get('link', ''),
                r.get('text', '').replace('\n', ' '),
            ])
    await bot.send_document(user_id, types.InputFile(path))
    os.remove(path)
    await call.message.answer(t('menu_main'), reply_markup=main_menu_keyboard())
    await call.answer()


@dp.message_handler(commands=['export'])
async def cmd_export(message: types.Message):
    check_subscription(message.from_user.id)
    await send_all_results(message.from_user.id)


@dp.message_handler(commands=['check_payment'])
async def cmd_check_payment(message: types.Message):
    user_id = message.from_user.id
    data = user_data.get(str(user_id))
    payment_id = data.get('payment_id') if data else None
    if not payment_id:
        await message.answer("–ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /tariff_pro –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è.")
        return
    status = check_pro_payment(payment_id)
    if status == 'succeeded':
        expiry = int((datetime.utcnow() + timedelta(days=30)).timestamp())
        data['subscription_expiry'] = expiry
        data.pop('payment_id', None)
        save_user_data(user_data)
        await message.answer("–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
    else:
        await message.answer(f"–ü–ª–∞—Ç—ë–∂ –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω. –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {status}")

async def send_all_results(user_id: int):
    data = user_data.get(str(user_id))
    if not data:
        return
    rows = []
    for parser in data.get('parsers', []):
        for r in parser.get('results', []):
            rows.append([
                r.get('keyword', ''),
                r.get('chat', ''),
                r.get('sender', ''),
                r.get('datetime', ''),
                r.get('link', ''),
                r.get('text', '').replace('\n', ' '),
            ])
    if not rows:
        await bot.send_message(user_id, t('no_results'))
        return
    path = f"results_{user_id}_all.csv"
    with open(path, 'w', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow(["keyword", "chat", "sender", "datetime", "link", "text"])
        writer.writerows(rows)
    await bot.send_document(user_id, types.InputFile(path), caption=t('csv_export_ready'))
    os.remove(path)


async def send_parser_results(user_id: int, idx: int):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å CSV —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞."""
    data = user_data.get(str(user_id))
    if not data:
        return
    parsers = data.get('parsers', [])
    if idx < 0 or idx >= len(parsers):
        return
    parser = parsers[idx]
    results = parser.get('results', [])
    if not results:
        await bot.send_message(user_id, t('no_results'))
        return
    path = f"results_{user_id}_{idx+1}.csv"
    with open(path, 'w', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow(["keyword", "chat", "sender", "datetime", "link", "text"])
        for r in results:
            writer.writerow([
                r.get('keyword', ''),
                r.get('chat', ''),
                r.get('sender', ''),
                r.get('datetime', ''),
                r.get('link', ''),
                r.get('text', '').replace('\n', ' '),
            ])
    await bot.send_document(user_id, types.InputFile(path))
    os.remove(path)


# Handler for callbacks like "edit_1" which allow choosing what to edit for a
# specific parser. More specific callbacks such as ``edit_chats_X`` and
# ``edit_keywords_X`` are handled separately below, so here we ensure that the
# data matches exactly the ``edit_<number>`` pattern.
@dp.callback_query_handler(lambda c: c.data.startswith('edit_') and c.data.count('_') == 1)
async def cb_edit_parser(call: types.CallbackQuery):
    idx = int(call.data.split('_')[1]) - 1
    parser = user_data.get(str(call.from_user.id), {}).get('parsers', [])[idx]
    text = parser_info_text(call.from_user.id, parser)
    await call.message.answer(
        text, reply_markup=parser_settings_keyboard(idx + 1)
    )
    await call.answer()


@dp.callback_query_handler(lambda c: c.data.startswith('edit_chats_'), state='*')
async def cb_edit_chats(call: types.CallbackQuery, state: FSMContext):
    idx = int(call.data.split('_')[2]) - 1
    await state.update_data(edit_idx=idx)
    await call.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —á–∞—Ç—ã (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ –∑–∞–ø—è—Ç—É—é):"
    )
    await EditParserStates.waiting_chats.set()
    await call.answer()


@dp.callback_query_handler(lambda c: c.data.startswith('edit_keywords_'), state='*')
async def cb_edit_keywords(call: types.CallbackQuery, state: FSMContext):
    idx = int(call.data.split('_')[2]) - 1
    await state.update_data(edit_idx=idx)
    await call.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):"
    )
    await EditParserStates.waiting_keywords.set()
    await call.answer()


@dp.callback_query_handler(lambda c: c.data.startswith('edit_exclude_'), state='*')
async def cb_edit_exclude(call: types.CallbackQuery, state: FSMContext):
    idx = int(call.data.split('_')[2]) - 1
    await state.update_data(edit_idx=idx)
    await call.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –∏—Å–∫–ª—é—á–∞—é—â–∏–µ —Å–ª–æ–≤–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):"
    )
    await EditParserStates.waiting_exclude.set()
    await call.answer()


@dp.callback_query_handler(lambda c: c.data.startswith('edit_name_'), state='*')
async def cb_edit_name(call: types.CallbackQuery, state: FSMContext):
    idx = int(call.data.split('_')[2]) - 1
    await state.update_data(edit_idx=idx)
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞:")
    await EditParserStates.waiting_name.set()
    await call.answer()


@dp.callback_query_handler(lambda c: c.data.startswith('edit_account_'), state='*')
async def cb_edit_account(call: types.CallbackQuery, state: FSMContext):
    idx = int(call.data.split('_')[2]) - 1
    await state.update_data(edit_idx=idx)
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ api_id –∞–∫–∫–∞—É–Ω—Ç–∞-–ø–∞—Ä—Å–µ—Ä–∞:")
    await EditParserStates.waiting_account_api_id.set()
    await call.answer()


@dp.callback_query_handler(lambda c: c.data.startswith('edit_tariff_'))
async def cb_edit_tariff(call: types.CallbackQuery, state: FSMContext):
    await cb_tariff_pro(call, state)


@dp.message_handler(state=ParserStates.waiting_name)
async def get_parser_name(message: types.Message, state: FSMContext):
    name = message.text.strip()
    if not name:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return
    await state.update_data(parser_name=name)
    await message.answer(
        "–£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —á–∞—Ç—ã –∏–ª–∏ –∫–∞–Ω–∞–ª—ã (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ –∑–∞–ø—è—Ç—É—é):"
    )
    await ParserStates.waiting_chats.set()

@dp.message_handler(commands=['addparser'], state='*')
async def cmd_add_parser(message: types.Message, state: FSMContext):
    await state.finish()
    user_id = message.from_user.id
    info = user_clients.get(user_id)
    if not info:
        saved = user_data.get(str(user_id))
        if not saved:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /login")
            return
        api_id = saved.get('api_id')
        api_hash = saved.get('api_hash')
        if not api_id or not api_hash:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /login")
            return
        session_name = f"session_{user_id}"
        client = TelegramClient(session_name, api_id, api_hash)
        await client.connect()
        if not await client.is_user_authorized():
            await message.answer("–°–µ—Å—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç –≤—Ö–æ–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login")
            return
        user_clients[user_id] = {
            'client': client,
            'phone': saved.get('phone'),
            'phone_hash': '',
            'parsers': saved.get('parsers', [])
        }
        for p in user_clients[user_id]['parsers']:
            await start_monitor(user_id, p)

    parsers = user_data.setdefault(str(user_id), {}).setdefault('parsers', [])
    parser_id = len(parsers) + 1
    parser = {
        'id': parser_id,
        'name': f'–ü–∞—Ä—Å–µ—Ä_{parser_id}',
        'chats': [],
        'keywords': [],
        'exclude_keywords': [],
        'api_id': '',
        'api_hash': '',
        'results': [],
    }
    parsers.append(parser)
    info = user_clients.setdefault(user_id, info or {})
    # Avoid duplicating the parser in runtime storage; ensure both
    # user_clients and persistent user_data reference the same list.
    info['parsers'] = parsers
    save_user_data(user_data)
    await message.answer(
        parser_info_text(user_id, parser, created=True),
        reply_markup=parser_settings_keyboard(parser_id),
    )

@dp.message_handler(commands=['login'], state="*")
async def start_login(message: types.Message, state: FSMContext):
    await state.finish()
    user_id = message.from_user.id
    check_subscription(user_id)
    data = user_data.get(str(user_id))
    now = int(datetime.utcnow().timestamp())
    if not data or data.get('subscription_expiry', 0) <= now:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –æ–ø–ª–∞—Ç–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –∫–æ–º–∞–Ω–¥–æ–π /tariff_pro")
        return
    existing = user_clients.pop(user_id, None)
    if existing:
        try:
            if 'task' in existing:
                existing['task'].cancel()
            await existing['client'].disconnect()
        except Exception:
            logging.exception("Failed to disconnect previous session")
    saved = user_data.get(str(user_id))
    if saved:
        api_id = saved.get('api_id')
        api_hash = saved.get('api_hash')
        if api_id and api_hash:
            session_name = f"session_{user_id}"
            client = TelegramClient(session_name, api_id, api_hash)
            await client.connect()
            if await client.is_user_authorized():
                user_clients[user_id] = {
                    'client': client,
                    'phone': saved.get('phone'),
                    'phone_hash': '',
                    'parsers': saved.get('parsers', [])
                }
                for p in user_clients[user_id]['parsers']:
                    await start_monitor(user_id, p)
                if user_clients[user_id]['parsers']:
                    await message.answer("‚úÖ –ù–∞–π–¥–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ø–∞—Ä—Å–µ—Ä—ã. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω.")
                    return
        await message.answer("üëã –°–µ—Å—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥. –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π *api_id* Telegram:", parse_mode="Markdown")
    else:
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π *api_id* Telegram:",
            parse_mode="Markdown"
        )
    await AuthStates.waiting_api_id.set()

@dp.message_handler(state=AuthStates.waiting_api_id)
async def get_api_id(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if not text.isdigit():
        await message.answer("‚ùó *api_id* –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:", parse_mode="Markdown")
        return
    await state.update_data(api_id=int(text))
    await message.answer("–û—Ç–ª–∏—á–Ω–æ. –í–≤–µ–¥–∏—Ç–µ *api_hash* –≤–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:", parse_mode="Markdown")
    await AuthStates.waiting_api_hash.set()

@dp.message_handler(state=AuthStates.waiting_api_hash)
async def get_api_hash(message: types.Message, state: FSMContext):
    api_hash = message.text.strip()
    if not api_hash or len(api_hash) < 5:
        await message.answer("‚ùó *api_hash* –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:", parse_mode="Markdown")
        return
    await state.update_data(api_hash=api_hash)
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ Telegram (—Å –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–º –∫–æ–¥–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä +79991234567):"
    )
    await AuthStates.waiting_phone.set()

@dp.message_handler(state=AuthStates.waiting_phone)
async def get_phone(message: types.Message, state: FSMContext):
    phone = message.text.strip()
    data = await state.get_data()
    api_id = data.get('api_id')
    api_hash = data.get('api_hash')
    user_id = message.from_user.id
    session_name = f"session_{user_id}"

    try:
        client = TelegramClient(session_name, api_id, api_hash)
        await client.connect()
        result = await client.send_code_request(phone)
        phone_hash = result.phone_code_hash
    except PhoneNumberInvalidError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ:")
        return
    except FloodWaitError as e:
        await message.answer(f"‚ö†Ô∏è Telegram –ø—Ä–æ—Å–∏—Ç –ø–æ–¥–æ–∂–¥–∞—Ç—å {e.seconds} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π.")
        await state.finish()
        return
    except Exception as e:
        logging.exception(e)
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–æ–¥–∞: {e}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start.")
        await state.finish()
        return

    user_clients[user_id] = {
        'client': client,
        'phone': phone,
        'phone_hash': phone_hash,
        'parsers': []
    }
    saved = user_data.get(str(user_id), {})
    saved.update({
        'api_id': api_id,
        'api_hash': api_hash,
        'phone': phone,
    })
    saved.setdefault('parsers', [])
    saved.setdefault('subscription_expiry', 0)
    saved.setdefault('recurring', False)
    saved.setdefault('reminder3_sent', False)
    saved.setdefault('reminder1_sent', False)
    saved.setdefault('inactive_notified', False)
    user_data[str(user_id)] = saved
    save_user_data(user_data)
    await state.update_data(phone=phone)

    await message.answer(
        "üì± –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥, *–≤—Å—Ç–∞–≤–ª—è—è –ª—é–±—ã–µ —Å–∏–º–≤–æ–ª—ã* (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–±–µ–ª—ã –∏–ª–∏ –¥–µ—Ñ–∏—Å—ã) –º–µ–∂–¥—É —Ü–∏—Ñ—Ä–∞–º–∏."
        " –Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–±–µ—Ä—É –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã.",
        parse_mode="Markdown"
    )
    await AuthStates.waiting_code.set()

@dp.message_handler(state=AuthStates.waiting_code)
async def get_code(message: types.Message, state: FSMContext):
    raw = message.text.strip()
    code = re.sub(r'\D', '', raw)
    user_id = message.from_user.id
    client_info = user_clients.get(user_id)

    if not client_info:
        await message.answer("‚ö†Ô∏è –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ /start.")
        await state.finish()
        return

    client = client_info['client']
    phone = client_info['phone']
    phone_hash = client_info['phone_hash']

    try:
        await client.sign_in(phone=phone, code=code, phone_code_hash=phone_hash)
    except PhoneCodeInvalidError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, –≤—Å—Ç–∞–≤–∏–≤ —Å–∏–º–≤–æ–ª—ã –º–µ–∂–¥—É —Ü–∏—Ñ—Ä–∞–º–∏:")
        return
    except PhoneCodeExpiredError:
        await message.answer(
            "‚ùå –ö–æ–¥ –∏—Å—Ç—ë–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥–æ–π /start –∏ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥."
        )
        await state.finish()
        return
    except SessionPasswordNeededError:
        await message.answer("üîí –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞—â–∏—â—ë–Ω –ø–∞—Ä–æ–ª–µ–º. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
        await AuthStates.waiting_password.set()
        return
    except Exception as e:
        logging.exception(e)
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: {e}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start.")
        await state.finish()
        return

    await message.answer(
        "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ *—Å—Å—ã–ª–∫–∏* –Ω–∞ —á–∞—Ç—ã –∏–ª–∏ –∫–∞–Ω–∞–ª—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."
        " –ü—Ä–∏–º–µ—Ä—ã: `https://t.me/username` –∏–ª–∏ `t.me/username`. –ß–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ –∑–∞–ø—è—Ç—É—é:",
        parse_mode="Markdown"
    )
    await ParserStates.waiting_chats.set()

@dp.message_handler(state=AuthStates.waiting_password)
async def get_password(message: types.Message, state: FSMContext):
    password = message.text.strip()
    user_id = message.from_user.id
    client_info = user_clients.get(user_id)

    if not client_info:
        await message.answer("‚ö†Ô∏è –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ /start.")
        await state.finish()
        return

    client = client_info['client']
    try:
        await client.sign_in(password=password)
    except Exception as e:
        logging.exception(e)
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return

    await message.answer(
        "‚úÖ –ü–∞—Ä–æ–ª—å –ø—Ä–∏–Ω—è—Ç! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ *—Å—Å—ã–ª–∫–∏* –Ω–∞ —á–∞—Ç—ã –∏–ª–∏ –∫–∞–Ω–∞–ª—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ –∑–∞–ø—è—Ç—É—é):",
        parse_mode="Markdown"
    )
    await ParserStates.waiting_chats.set()

async def _process_chats(message: types.Message, state: FSMContext, next_state):
    text = message.text.strip().replace(',', ' ')
    parts = [p for p in text.split() if p]
    user_id = message.from_user.id
    client = user_clients[user_id]['client']
    chat_ids = []

    for part in parts:
        try:
            entity = await client.get_entity(part)
            chat_ids.append(entity.id)
        except Exception:
            if part.lstrip("-").isdigit():
                chat_ids.append(int(part))
            else:
                await message.answer(
                    "‚ö†Ô∏è –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤ –∞–∫–∫–∞—É–Ω—Ç–µ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏.")
                return None

    if not chat_ids:
        await message.answer("‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫. –í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Å—ã–ª–∫—É –∏–ª–∏ ID:")
        return None

    if len(chat_ids) > CHAT_LIMIT:
        await message.answer(f"‚ö†Ô∏è –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ {CHAT_LIMIT} —á–∞—Ç–æ–≤.")
        return None

    await state.update_data(chat_ids=chat_ids)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):")
    await next_state.set()
    return chat_ids


@dp.message_handler(state=AuthStates.waiting_chats)
async def get_chats_auth(message: types.Message, state: FSMContext):
    await _process_chats(message, state, AuthStates.waiting_keywords)


@dp.message_handler(state=ParserStates.waiting_chats)
async def get_chats_parser(message: types.Message, state: FSMContext):
    await _process_chats(message, state, ParserStates.waiting_keywords)

async def _process_keywords(message: types.Message, state: FSMContext):
    keywords = [w.strip().lower() for w in message.text.split(',') if w.strip()]
    if not keywords:
        await message.answer("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–ª–æ–≤–æ:")
        return

    user_id = message.from_user.id
    data = await state.get_data()
    chat_ids = data.get('chat_ids')
    if not chat_ids:
        await message.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ —á–∞—Ç—ã.")
        return

    await state.update_data(keywords=keywords)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ api_id –∞–∫–∫–∞—É–Ω—Ç–∞-–ø–∞—Ä—Å–µ—Ä–∞:")
    await ParserStates.waiting_account_api_id.set()


@dp.message_handler(state=AuthStates.waiting_keywords)
async def get_keywords_auth(message: types.Message, state: FSMContext):
    await _process_keywords(message, state)


@dp.message_handler(state=ParserStates.waiting_keywords)
async def get_keywords_parser(message: types.Message, state: FSMContext):
    await _process_keywords(message, state)


@dp.message_handler(state=ParserStates.waiting_account_api_id)
async def get_parser_api_id(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if not text.isdigit():
        await message.answer("‚ö†Ô∏è api_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return
    await state.update_data(api_id=int(text))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ api_hash –∞–∫–∫–∞—É–Ω—Ç–∞-–ø–∞—Ä—Å–µ—Ä–∞:")
    await ParserStates.waiting_account_api_hash.set()


@dp.message_handler(state=ParserStates.waiting_account_api_hash)
async def get_parser_api_hash(message: types.Message, state: FSMContext):
    api_hash = message.text.strip()
    data = await state.get_data()
    api_id = data.get('api_id')
    user_id = message.from_user.id
    chat_ids = data.get('chat_ids')
    keywords = data.get('keywords')
    name = data.get(
        'parser_name',
        f"–ü–∞—Ä—Å–µ—Ä {len(user_data.get(str(user_id), {}).get('parsers', [])) + 1}"
    )
    parser = {
        'name': name,
        'chats': chat_ids,
        'keywords': keywords,
        'api_id': api_id,
        'api_hash': api_hash,
        'results': [],
    }
    info = user_clients.setdefault(user_id, {})
    info.setdefault('parsers', []).append(parser)
    if str(user_id) in user_data:
        user_data[str(user_id)].setdefault('parsers', []).append(parser)
        save_user_data(user_data)

    await start_monitor(user_id, parser)

    await message.answer("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω! –Ø —É–≤–µ–¥–æ–º–ª—é –≤–∞—Å –æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è—Ö.")
    await state.finish()


@dp.message_handler(state=EditParserStates.waiting_chats)
async def edit_chats_handler(message: types.Message, state: FSMContext):
    data = await state.get_data()
    idx = data.get('edit_idx')
    text = message.text.strip().replace(',', ' ')
    parts = [p for p in text.split() if p]
    user_id = message.from_user.id
    client = user_clients[user_id]['client']
    chat_ids = []
    for part in parts:
        try:
            entity = await client.get_entity(part)
            chat_ids.append(entity.id)
        except Exception:
            if part.lstrip("-").isdigit():
                chat_ids.append(int(part))
            else:
                await message.answer("‚ö†Ô∏è –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏.")
                return
    if not chat_ids:
        await message.answer("‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫. –í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Å—ã–ª–∫—É –∏–ª–∏ ID:")
        return

    if len(chat_ids) > CHAT_LIMIT:
        await message.answer(f"‚ö†Ô∏è –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ {CHAT_LIMIT} —á–∞—Ç–æ–≤.")
        return
    parser = user_data[str(user_id)]['parsers'][idx]
    stop_monitor(user_id, parser)
    parser['chats'] = chat_ids
    save_user_data(user_data)
    await start_monitor(user_id, parser)
    await state.finish()
    await message.answer("‚úÖ –ß–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")


@dp.message_handler(state=EditParserStates.waiting_keywords)
async def edit_keywords_handler(message: types.Message, state: FSMContext):
    data = await state.get_data()
    idx = data.get('edit_idx')
    keywords = [w.strip().lower() for w in message.text.split(',') if w.strip()]
    if not keywords:
        await message.answer("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–ª–æ–≤–æ:")
        return
    user_id = message.from_user.id
    parser = user_data[str(user_id)]['parsers'][idx]
    stop_monitor(user_id, parser)
    parser['keywords'] = keywords
    save_user_data(user_data)
    await start_monitor(user_id, parser)
    await state.finish()
    await message.answer("‚úÖ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")


@dp.message_handler(state=EditParserStates.waiting_exclude)
async def edit_exclude_handler(message: types.Message, state: FSMContext):
    data = await state.get_data()
    idx = data.get('edit_idx')
    words = [w.strip().lower() for w in message.text.split(',') if w.strip()]
    user_id = message.from_user.id
    parser = user_data[str(user_id)]['parsers'][idx]
    stop_monitor(user_id, parser)
    parser['exclude_keywords'] = words
    save_user_data(user_data)
    await start_monitor(user_id, parser)
    await state.finish()
    await message.answer("‚úÖ –ò—Å–∫–ª—é—á–∞—é—â–∏–µ —Å–ª–æ–≤–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")


@dp.message_handler(state=EditParserStates.waiting_name)
async def edit_name_handler(message: types.Message, state: FSMContext):
    data = await state.get_data()
    idx = data.get('edit_idx')
    new_name = message.text.strip()
    user_id = message.from_user.id
    parser = user_data[str(user_id)]['parsers'][idx]
    parser['name'] = new_name
    save_user_data(user_data)
    await state.finish()
    await message.answer("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")


@dp.message_handler(state=EditParserStates.waiting_account_api_id)
async def edit_account_api_id(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if not text.isdigit():
        await message.answer("‚ö†Ô∏è api_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return
    await state.update_data(api_id=int(text))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π api_hash –∞–∫–∫–∞—É–Ω—Ç–∞-–ø–∞—Ä—Å–µ—Ä–∞:")
    await EditParserStates.waiting_account_api_hash.set()


@dp.message_handler(state=EditParserStates.waiting_account_api_hash)
async def edit_account_api_hash(message: types.Message, state: FSMContext):
    data = await state.get_data()
    idx = data.get('edit_idx')
    api_id = data.get('api_id')
    api_hash = message.text.strip()
    user_id = message.from_user.id
    parser = user_data[str(user_id)]['parsers'][idx]
    stop_monitor(user_id, parser)
    parser['api_id'] = api_id
    parser['api_hash'] = api_hash
    save_user_data(user_data)
    await start_monitor(user_id, parser)
    await state.finish()
    await message.answer("‚úÖ –ê–∫–∫–∞—É–Ω—Ç –æ–±–Ω–æ–≤–ª—ë–Ω.")

if __name__ == '__main__':
    print("Bot is starting...")
    executor.start_polling(dp, skip_updates=True)
