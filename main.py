import re
import os
import json
import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import snowballstemmer
import pymorphy3
from telethon import TelegramClient, events
from telethon.errors import (
    SessionPasswordNeededError,
    PhoneNumberInvalidError,
    PhoneCodeInvalidError,
    PhoneCodeExpiredError,
    FloodWaitError
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã —Å–ª–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤
morph_ru = pymorphy3.MorphAnalyzer()
stemmer_en = snowballstemmer.stemmer('english')

# –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç
bot = Bot(token="7930844421:AAFKC9cUVVdttJHa3fpnUSnAWgr8Wa6-wPE")
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö Telethon –∫–ª–∏–µ–Ω—Ç–æ–≤ (–Ω–µ —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç—Å—è)
user_clients = {}  # {user_id_str: TelegramClient}

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
DATA_FILE = 'users.json'
try:
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            user_data = json.load(f)
    else:
        user_data = {}
except (json.JSONDecodeError, ValueError):
    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å {DATA_FILE}, –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    user_data = {}

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–∏—Å–∫–ª—é—á–∞–µ–º client)
def save_data():
    serializable = {}
    for uid, data in user_data.items():
        filtered = {k: v for k, v in data.items() if k != 'client'}
        serializable[uid] = filtered
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(serializable, f, ensure_ascii=False, indent=2)

# –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤
def normalize_word(word: str) -> str:
    word = word.lower()
    if re.search('[–∞-—è–ê-–Ø]', word):
        # –†—É—Å—Å–∫–∏–µ —Å–ª–æ–≤–∞ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∞—á–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ
        return morph_ru.normal_forms(word)[0]
    # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —è–∑—ã–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Å—Ç–µ–º–º–µ—Ä
    return stemmer_en.stemWord(word)

# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞
def normalized_words(text: str):
    words = re.findall(r"\b\w+\b", text.lower())
    return [normalize_word(w) for w in words]

# FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è
class AuthStates(StatesGroup):
    waiting_api_id = State()
    waiting_api_hash = State()
    waiting_phone = State()
    waiting_code = State()
    waiting_password = State()
    waiting_add_chats = State()
    waiting_add_keywords = State()
    waiting_promo_code = State()
    waiting_promo_input = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def main_menu_keyboard():
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.add(
        types.InlineKeyboardButton('–ü–æ–º–æ—â—å', callback_data='help'),
        types.InlineKeyboardButton('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', callback_data='info'),
        types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç—ã', callback_data='add_chats'),
        types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞', callback_data='add_keywords'),
        types.InlineKeyboardButton('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã', callback_data='results'),
        types.InlineKeyboardButton('–¢–∞—Ä–∏—Ñ Pro', callback_data='pro')
    )
    return kb

# ------------------------- /start -------------------------
@dp.message_handler(commands=['start'], state='*')
async def cmd_start(message: types.Message, state: FSMContext):
    await state.finish()
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TopGrabber ‚Äî –≤–∞—à –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∏ —Ç–µ–ø–ª—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.\n\n"
        "üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: —É–∫–∞–∂–∏—Ç–µ –≤ –º–µ–Ω—é —á–∞—Ç—ã –∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ ‚Äî –±–æ—Ç —É–≤–µ–¥–æ–º–∏—Ç –≤–∞—Å –æ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö."
    )
    await message.answer(text, reply_markup=main_menu_keyboard())

# ------------------------- –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ Pro (—Å –ø—Ä–∏–≤—è–∑–∫–æ–π) -------------------------
@dp.callback_query_handler(lambda c: c.data == 'pro')
async def callback_pro(c: types.CallbackQuery):
    uid = str(c.from_user.id)
    if uid not in user_data or 'api_id' not in user_data[uid]:
        await c.message.answer(
            "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞ Pro –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∑–∞—Ç—å Telegram-–∞–∫–∫–∞—É–Ω—Ç.\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à api_id (—á–∏—Å–ª–æ):"
        )
        await AuthStates.waiting_api_id.set()
    else:
        await c.message.answer(
            "–¢–∞—Ä–∏—Ñ Pro: 1990‚ÇΩ –∑–∞ 30 –¥–Ω–µ–π (5 —á–∞—Ç–æ–≤).\n–£ –≤–∞—Å –µ—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥? (–¥–∞/–Ω–µ—Ç)"
        )
        await AuthStates.waiting_promo_code.set()
    await c.answer()

# ------------------------- –ü—Ä–∏–≤—è–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ -------------------------
@dp.message_handler(state=AuthStates.waiting_api_id)
async def process_api_id(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.reply("‚ùó api_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return
    await state.update_data(api_id=int(message.text))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ api_hash –≤–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:")
    await AuthStates.waiting_api_hash.set()

@dp.message_handler(state=AuthStates.waiting_api_hash)
async def process_api_hash(message: types.Message, state: FSMContext):
    api_hash = message.text.strip()
    if not api_hash:
        await message.reply("‚ùó api_hash –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return
    await state.update_data(api_hash=api_hash)
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Å –∫–æ–¥–æ–º —Å—Ç—Ä–∞–Ω—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä +79991234567):"
    )
    await AuthStates.waiting_phone.set()

@dp.message_handler(state=AuthStates.waiting_phone)
async def process_phone(message: types.Message, state: FSMContext):
    data = await state.get_data()
    api_id = data['api_id']
    api_hash = data['api_hash']
    phone = message.text.strip()
    session = f"session_{message.from_user.id}"
    client = TelegramClient(session, api_id, api_hash)
    try:
        await client.connect()
        res = await client.send_code_request(phone)
    except PhoneNumberInvalidError:
        await message.reply("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return
    except FloodWaitError as e:
        await message.reply(f"‚ö†Ô∏è –ü–æ–¥–æ–∂–¥–∏—Ç–µ {e.seconds} —Å–µ–∫—É–Ω–¥.")
        await state.finish()
        return
    except Exception as e:
        logging.exception(e)
        await message.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.finish()
        return
    uid = str(message.from_user.id)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –±–µ–∑ client
    user_data.setdefault(uid, {}).update({
        'api_id': api_id,
        'api_hash': api_hash,
        'phone': phone,
        'phone_hash': res.phone_code_hash
    })
    # Client —Ö—Ä–∞–Ω–∏—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
    user_clients[uid] = client
    save_data()
    await message.answer("üì± –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):")
    await AuthStates.waiting_code.set()

@dp.message_handler(state=AuthStates.waiting_code)
async def process_code(message: types.Message, state: FSMContext):
    uid = str(message.from_user.id)
    code = re.sub(r"\D", '', message.text)
    client = user_clients.get(uid)
    usr = user_data.get(uid, {})
    try:
        await client.sign_in(code=code, phone=usr['phone'], phone_code_hash=usr['phone_hash'])
    except PhoneCodeInvalidError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return
    except PhoneCodeExpiredError:
        await message.reply("‚ùå –ö–æ–¥ –∏—Å—Ç—ë–∫. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start.")
        await state.finish()
        return
    except SessionPasswordNeededError:
        await message.answer("üîí –ê–∫–∫–∞—É–Ω—Ç –∑–∞—â–∏—â—ë–Ω –ø–∞—Ä–æ–ª–µ–º. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
        await AuthStates.waiting_password.set()
        return
    await message.answer("‚úÖ –ê–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–≤—è–∑–∞–Ω!", reply_markup=main_menu_keyboard())
    await setup_client(uid)
    await state.finish()

@dp.message_handler(state=AuthStates.waiting_password)
async def process_password(message: types.Message, state: FSMContext):
    uid = str(message.from_user.id)
    client = user_clients.get(uid)
    try:
        await client.sign_in(password=message.text.strip())
    except Exception:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return
    await message.answer("‚úÖ –ü–∞—Ä–æ–ª—å –ø—Ä–∏–Ω—è—Ç! –ê–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–≤—è–∑–∞–Ω.", reply_markup=main_menu_keyboard())
    await setup_client(uid)
    await state.finish()

    
# ------------------------- CALLBACKS -------------------------
@dp.callback_query_handler(lambda c: c.data == 'help')
async def callback_help(c: types.CallbackQuery):
    text = (
        "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, —Å–º–æ—Ç—Ä–∏—Ç–µ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∏–ª–∏ –ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: https://t.me/ihxY6kUFLe1kNmQy"
    )
    await c.message.answer(text)
    await c.answer()

@dp.callback_query_handler(lambda c: c.data == 'info')
async def callback_info(c: types.CallbackQuery):
    text = (
        "TopGrabber ‚Äî —Å–µ—Ä–≤–∏—Å –ø–æ–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ Telegram."
        " –ú–∏–Ω–∏–º—É–º 5 —á–∞—Ç–æ–≤, —Ü–µ–Ω–∞ 1990‚ÇΩ/30–¥, –¥–æ–ø. —á–∞—Ç 490‚ÇΩ/30–¥.\n"
        "¬© 2025 TOPGrabberbot | –ò–ü –ê–Ω—Ç—é—Ñ—å–µ–≤ –ë.–í."
    )
    await c.message.answer(text)
    await c.answer()

@dp.callback_query_handler(lambda c: c.data == 'add_chats')
async def callback_add_chats(c: types.CallbackQuery):
    await c.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –∏–ª–∏ ID —á–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ –∑–∞–ø—è—Ç—É—é:\n"
        "–ü—Ä–∏–º–µ—Ä: @username -1001234567890 https://t.me/example"
    )
    await AuthStates.waiting_add_chats.set()
    await c.answer()

@dp.callback_query_handler(lambda c: c.data == 'add_keywords')
async def callback_add_keywords(c: types.CallbackQuery):
    await c.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä.: –ø—Ä–æ–¥–∞–∂–∞, –º–∞—Ä–∫–µ—Ç–∏–Ω–≥):")
    await AuthStates.waiting_add_keywords.set()
    await c.answer()

@dp.callback_query_handler(lambda c: c.data == 'results')
async def callback_results(c: types.CallbackQuery):
    user_id = str(c.from_user.id)
    matches = user_data.get(user_id, {}).get('matches', [])
    if not matches:
        await c.message.answer("‚ÑπÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
    else:
        import pandas as pd
        df = pd.DataFrame(matches)
        path = f"results_{user_id}.xlsx"
        df.to_excel(path, index=False)
        await c.message.answer_document(
            types.InputFile(path), caption="–°—Å—ã–ª–∫–∞ –Ω–∞ AlertBot: @alert_bot"
        )
    await c.answer()

# ------------------------- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–æ–≤ -------------------------
@dp.message_handler(state=AuthStates.waiting_add_chats)
async def process_add_chats(message: types.Message, state: FSMContext):
    parts = re.split(r"[\s,]+", message.text.strip())
    new_ids = []
    client = user_data[str(message.from_user.id)].get('client')
    for part in parts:
        if not part: continue
        if part.isdigit() or (part.startswith('-') and part[1:].isdigit()):
            new_ids.append(int(part))
        else:
            try:
                ent = await client.get_entity(part)
                new_ids.append(ent.id)
            except:
                await message.reply(
                    "‚ö†Ô∏è –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –æ–Ω –µ—Å—Ç—å –≤ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ –∏–ª–∏ —Å—Å—ã–ª–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞, –∑–∞—Ç–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:"
                )
                return
    usr = user_data[str(message.from_user.id)]
    usr.setdefault('chats', [])
    for cid in new_ids:
        if cid not in usr['chats']:
            usr['chats'].append(cid)
    save_data()
    await message.reply("‚úÖ –ß–∞—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
    await state.finish()

# ------------------------- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ -------------------------
@dp.message_handler(state=AuthStates.waiting_add_keywords)
async def process_add_keywords(message: types.Message, state: FSMContext):
    kws = [w.strip().lower() for w in message.text.split(',') if w.strip()]
    if not kws:
        await message.reply("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")
        return
    usr = user_data[str(message.from_user.id)]
    usr.setdefault('keywords', [])
    for kw in kws:
        if kw not in usr['keywords']:
            usr['keywords'].append(kw)
    save_data()
    await message.reply("‚úÖ –°–ª–æ–≤–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    await state.finish()

# ------------------------- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞ -------------------------
@dp.message_handler(state=AuthStates.waiting_promo_code)
async def process_promo_code(message: types.Message, state: FSMContext):
    ans = message.text.strip().lower()
    if ans in ('–¥–∞', '–µ—Å—Ç—å'):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:")
        await AuthStates.waiting_promo_input.set()
    else:
        await message.answer("–û—Ç–ø—Ä–∞–≤–ª—è—é —Å—á–µ—Ç –±–µ–∑ –ø—Ä–æ–º–æ–∫–æ–¥–∞.")
        await state.finish()

@dp.message_handler(state=AuthStates.waiting_promo_input)
async def process_promo_input(message: types.Message, state: FSMContext):
    code = message.text.strip()
    if code == 'PROMO2025':
        await message.answer("–ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–Ω—è—Ç! –°—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–æ —Å–∫–∏–¥–∫–æ–π.")
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥. –°—á–µ—Ç –±–µ–∑ —Å–∫–∏–¥–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    await state.finish()

# ------------------------- TELETHON MONITORING -------------------------
async def setup_client(user_id_str: str):
    data = user_data[user_id_str]
    session = f"session_{user_id_str}"
    client = TelegramClient(session, data['api_id'], data['api_hash'])
    await client.start()
    data['client'] = client
    user_clients[user_id_str] = client
    chats = data.get('chats', [])
    keywords = data.get('keywords', [])
    @client.on(events.NewMessage(chats=chats))
    async def monitor(event):
        sender = await event.get_sender()
        if sender and getattr(sender, 'bot', False):
            return
        text = event.raw_text or ''
        words = normalized_words(text)
        for kw in keywords:
            if normalize_word(kw) in words:
                chat = await event.get_chat()
                if hasattr(chat, 'username') and chat.username:
                    msg_link = f"https://t.me/{chat.username}/{event.message.id}"
                else:
                    msg_link = f"tg://openmessage?user_id={event.message.peer_id.user_id or chat.id}"
                uname = sender.username or str(sender.id)
                dt = event.message.date.astimezone().strftime("%Y-%m-%d %H:%M:%S")
                rec = {'Message Link': msg_link, 'Username': uname, 'DateTime': dt, 'Promo Word': kw, 'Message': text}
                data.setdefault('matches', []).append(rec)
                save_data()
                await bot.send_message(int(user_id_str), f"üîî *–ù–∞–π–¥–µ–Ω–æ '{kw}'*", parse_mode="Markdown")
                detail = (
                    f"*Message Link:* {msg_link}\n"
                    f"*Username:* {uname}\n"
                    f"*DateTime:* {dt}\n"
                    f"*Promo Word:* {kw}\n"
                    f"*Message:* {text[:400]}"
                )
                await bot.send_message(int(user_id_str), detail, parse_mode="Markdown")
                break
    asyncio.create_task(client.run_until_disconnected())
    

async def on_startup(dp):
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Telethon-–∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for uid, data in user_data.items():
        if all(k in data for k in ('api_id', 'api_hash', 'chats', 'keywords')):
            await setup_client(uid)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
