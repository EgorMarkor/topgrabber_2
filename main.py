import re
import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from telethon import TelegramClient, events
from telethon.errors import (
    SessionPasswordNeededError,
    PhoneNumberInvalidError,
    PhoneCodeInvalidError,
    PhoneCodeExpiredError,
    FloodWaitError
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

API_TOKEN = "7930844421:AAFKC9cUVVdttJHa3fpnUSnAWgr8Wa6-wPE"
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ Telethon-–∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
user_clients = {}  # {user_id: {"client": TelegramClient, "phone": str, "phone_hash": str, "chats": list, "keywords": list}}

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
class AuthStates(StatesGroup):
    waiting_api_id = State()
    waiting_api_hash = State()
    waiting_phone = State()
    waiting_code = State()
    waiting_password = State()
    waiting_chats = State()
    waiting_keywords = State()

@dp.message_handler(commands=['start', 'login'], state="*")
async def start_login(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π *api_id* Telegram:",
        parse_mode="Markdown"
    )
    await AuthStates.waiting_api_id.set()

@dp.message_handler(state=AuthStates.waiting_api_id)
async def get_api_id(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if not text.isdigit():
        await message.answer("‚ùó *api_id* –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:", parse_mode="Markdown")
        return
    await state.update_data(api_id=int(text))
    await message.answer("–û—Ç–ª–∏—á–Ω–æ. –í–≤–µ–¥–∏—Ç–µ *api_hash* –≤–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:", parse_mode="Markdown")
    await AuthStates.waiting_api_hash.set()

@dp.message_handler(state=AuthStates.waiting_api_hash)
async def get_api_hash(message: types.Message, state: FSMContext):
    api_hash = message.text.strip()
    if not api_hash or len(api_hash) < 5:
        await message.answer("‚ùó *api_hash* –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:", parse_mode="Markdown")
        return
    await state.update_data(api_hash=api_hash)
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ Telegram (—Å –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–º –∫–æ–¥–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä +79991234567):"
    )
    await AuthStates.waiting_phone.set()

@dp.message_handler(state=AuthStates.waiting_phone)
async def get_phone(message: types.Message, state: FSMContext):
    phone = message.text.strip()
    data = await state.get_data()
    api_id = data.get('api_id')
    api_hash = data.get('api_hash')
    user_id = message.from_user.id
    session_name = f"session_{user_id}"

    try:
        client = TelegramClient(session_name, api_id, api_hash)
        await client.connect()
        result = await client.send_code_request(phone)
        phone_hash = result.phone_code_hash
    except PhoneNumberInvalidError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ:")
        return
    except FloodWaitError as e:
        await message.answer(f"‚ö†Ô∏è Telegram –ø—Ä–æ—Å–∏—Ç –ø–æ–¥–æ–∂–¥–∞—Ç—å {e.seconds} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π.")
        await state.finish()
        return
    except Exception as e:
        logging.exception(e)
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–æ–¥–∞: {e}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start.")
        await state.finish()
        return

    user_clients[user_id] = {
        'client': client,
        'phone': phone,
        'phone_hash': phone_hash,
        'chats': None,
        'keywords': None
    }
    await state.update_data(phone=phone)

    await message.answer(
        "üì± –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥, *–≤—Å—Ç–∞–≤–ª—è—è –ª—é–±—ã–µ —Å–∏–º–≤–æ–ª—ã* (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–±–µ–ª—ã –∏–ª–∏ –¥–µ—Ñ–∏—Å—ã) –º–µ–∂–¥—É —Ü–∏—Ñ—Ä–∞–º–∏."
        " –Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–±–µ—Ä—É –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã.",
        parse_mode="Markdown"
    )
    await AuthStates.waiting_code.set()

@dp.message_handler(state=AuthStates.waiting_code)
async def get_code(message: types.Message, state: FSMContext):
    raw = message.text.strip()
    code = re.sub(r'\D', '', raw)
    user_id = message.from_user.id
    client_info = user_clients.get(user_id)

    if not client_info:
        await message.answer("‚ö†Ô∏è –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ /start.")
        await state.finish()
        return

    client = client_info['client']
    phone = client_info['phone']
    phone_hash = client_info['phone_hash']

    try:
        await client.sign_in(phone=phone, code=code, phone_code_hash=phone_hash)
    except PhoneCodeInvalidError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, –≤—Å—Ç–∞–≤–∏–≤ —Å–∏–º–≤–æ–ª—ã –º–µ–∂–¥—É —Ü–∏—Ñ—Ä–∞–º–∏:")
        return
    except PhoneCodeExpiredError:
        await message.answer(
            "‚ùå –ö–æ–¥ –∏—Å—Ç—ë–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥–æ–π /start –∏ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥."
        )
        await state.finish()
        return
    except SessionPasswordNeededError:
        await message.answer("üîí –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞—â–∏—â—ë–Ω –ø–∞—Ä–æ–ª–µ–º. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
        await AuthStates.waiting_password.set()
        return
    except Exception as e:
        logging.exception(e)
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: {e}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start.")
        await state.finish()
        return

    await message.answer(
        "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ *—Å—Å—ã–ª–∫–∏* –Ω–∞ —á–∞—Ç—ã –∏–ª–∏ –∫–∞–Ω–∞–ª—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."
        " –ü—Ä–∏–º–µ—Ä—ã: `https://t.me/username` –∏–ª–∏ `t.me/username`. –ß–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ –∑–∞–ø—è—Ç—É—é:",
        parse_mode="Markdown"
    )
    await AuthStates.waiting_chats.set()

@dp.message_handler(state=AuthStates.waiting_password)
async def get_password(message: types.Message, state: FSMContext):
    password = message.text.strip()
    user_id = message.from_user.id
    client_info = user_clients.get(user_id)

    if not client_info:
        await message.answer("‚ö†Ô∏è –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ /start.")
        await state.finish()
        return

    client = client_info['client']
    try:
        await client.sign_in(password=password)
    except Exception as e:
        logging.exception(e)
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return

    await message.answer(
        "‚úÖ –ü–∞—Ä–æ–ª—å –ø—Ä–∏–Ω—è—Ç! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ *—Å—Å—ã–ª–∫–∏* –Ω–∞ —á–∞—Ç—ã –∏–ª–∏ –∫–∞–Ω–∞–ª—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ –∑–∞–ø—è—Ç—É—é):",
        parse_mode="Markdown"
    )
    await AuthStates.waiting_chats.set()

@dp.message_handler(state=AuthStates.waiting_chats)
async def get_chats(message: types.Message, state: FSMContext):
    text = message.text.strip().replace(',', ' ')
    parts = [p for p in text.split() if p]
    user_id = message.from_user.id
    client = user_clients[user_id]['client']
    chat_ids = []

    for part in parts:
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Å—É—â–Ω–æ—Å—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ –∏–ª–∏ username
            entity = await client.get_entity(part)
            chat_ids.append(entity.id)
        except Exception:
            # –ü—ã—Ç–∞–µ–º—Å—è –∫–∞–∫ ID
            if part.isdigit():
                chat_ids.append(int(part))
            else:
                await message.answer(
                    f"‚ö†Ô∏è '{part}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—Å—ã–ª–∫–æ–π –∏–ª–∏ ID. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:" )
                return

    if not chat_ids:
        await message.answer("‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫. –í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Å—ã–ª–∫—É –∏–ª–∏ ID:")
        return

    user_clients[user_id]['chats'] = chat_ids
    await state.update_data(chat_ids=chat_ids)

    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):")
    await AuthStates.waiting_keywords.set()

@dp.message_handler(state=AuthStates.waiting_keywords)
async def get_keywords(message: types.Message, state: FSMContext):
    keywords = [w.strip().lower() for w in message.text.split(',') if w.strip()]
    if not keywords:
        await message.answer("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–ª–æ–≤–æ:")
        return

    user_id = message.from_user.id
    user_clients[user_id]['keywords'] = keywords
    client = user_clients[user_id]['client']
    chat_ids = user_clients[user_id]['chats']

    @client.on(events.NewMessage(chats=chat_ids))
    async def monitor(event):
        text = event.raw_text or ''
        lowered = text.lower()
        for kw in keywords:
            if kw in lowered:
                chat = await event.get_chat()
                title = getattr(chat, 'title', str(event.chat_id))
                preview = text[:400]
                await bot.send_message(
                    user_id,
                    f"üîî –ù–∞–π–¥–µ–Ω–æ '{kw}' –≤ —á–∞—Ç–µ '{title}':\n```{preview}```",
                    parse_mode="Markdown"
                )
                break

    if not client.is_connected():
        await client.connect()
    asyncio.create_task(client.run_until_disconnected())

    await message.answer("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω! –Ø —É–≤–µ–¥–æ–º–ª—é –≤–∞—Å –æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è—Ö.")
    await state.finish()

if __name__ == '__main__':
    print("Bot is starting...")
    executor.start_polling(dp, skip_updates=True)