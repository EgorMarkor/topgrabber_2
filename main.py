import re
import asyncio
import logging
import json
import os
import html
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from telethon import TelegramClient, events
from telethon.errors import (
    SessionPasswordNeededError,
    PhoneNumberInvalidError,
    PhoneCodeInvalidError,
    PhoneCodeExpiredError,
    FloodWaitError
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

API_TOKEN = "7930844421:AAFKC9cUVVdttJHa3fpnUSnAWgr8Wa6-wPE"
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ Telethon-–∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
user_clients = {}  # runtime data: {user_id: {"client": TelegramClient, "phone": str, "phone_hash": str, "chats": list, "keywords": list}}

DATA_FILE = "user_data.json"

def load_user_data():
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        except Exception:
            logging.exception("Failed to load user data")
    return {}


def save_user_data(data):
    try:
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception:
        logging.exception("Failed to save user data")


user_data = load_user_data()  # persistent data: {str(user_id): {...}}

# –¢–µ–∫—Å—Ç –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
INFO_TEXT = (
    "TopGrabber ‚Äì —ç—Ç–æ —Å–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤"
    " –≤ —á–∞—Ç–∞—Ö Telegram. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞, —É–∫–∞–∑–∞–≤ –Ω—É–∂–Ω—ã–µ "
    "–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ —á–∞—Ç—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ö–æ—Ç–∏—Ç–µ –∏—Å–∫–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤. –ù–∞—à –±–æ—Ç"
    " —É–≤–µ–¥–æ–º–∏—Ç –≤–∞—Å –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.\n"
    "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∫ –±–æ—Ç—É (https://dzen.ru/a/ZuHH1h_M5kqcam1A)\n"
    "–ë–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π (https://t.me/TOPGrabber_bot)\n\n"
    "–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤ - 5—à—Ç\n"
    "–¶–µ–Ω–∞:\n1 990‚ÇΩ/ 30 –¥–Ω–µ–π\n"
    "–ö—É–ø–∏—Ç—å 1 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —á–∞—Ç:\n490‚ÇΩ/ 30 –¥–Ω–µ–π\n\n"
    "Copyright ¬© 2024 TOPGrabberbot ‚Äî AI-–ü–∞—Ä—Å–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π | "
    "–ò–ü –ê–Ω—Ç—É—Ñ—å–µ–≤ –ë.–í. (https://telegra.ph/Rekvizity-08-20-2) "
    "–û–ì–†–ù 304770000133140 –ò–ù–ù 026408848802 | "
    "–ü—É–±–ª–∏—á–Ω–∞—è –æ—Ñ–µ—Ä—Ç–∞ (https://telegra.ph/Publichnaya-oferta-09-11)"
)

# –¢–µ–∫—Å—Ç –¥–ª—è –ø–æ–º–æ—â–∏
HELP_TEXT = (
    "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –∏–∑—É—á–∏—Ç–µ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∫ –±–æ—Ç—É "
    "(https://dzen.ru/a/ZuHH1h_M5kqcam1A) –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: "
    "https://t.me/+PqfIWqHquts4YjQy"
)


async def start_monitor(user_id: int):
    info = user_clients.get(user_id)
    if not info:
        return
    client = info['client']
    chat_ids = info.get('chats')
    keywords = info.get('keywords')
    if not chat_ids or not keywords:
        return

    async def monitor(event):
        sender = await event.get_sender()
        if getattr(sender, 'bot', False):
            return
        text = event.raw_text or ''
        words = re.findall(r'\w+', text.lower())
        for kw in keywords:
            if kw.lower() in words:
                chat = await event.get_chat()
                title = getattr(chat, 'title', str(event.chat_id))
                username = getattr(sender, 'username', None)
                sender_name = f"@{username}" if username else getattr(sender, 'first_name', 'Unknown')
                msg_time = event.message.date.strftime('%Y-%m-%d %H:%M:%S')
                link = '–°—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'
                chat_username = getattr(chat, 'username', None)
                if chat_username:
                    link = f"https://t.me/{chat_username}/{event.id}"
                preview = html.escape(text[:400])
                await bot.send_message(
                    user_id,
                    f"üîî –ù–∞–π–¥–µ–Ω–æ '{html.escape(kw)}' –≤ —á–∞—Ç–µ '{html.escape(title)}'\n"
                    f"Username: {html.escape(sender_name)}\n"
                    f"DateTime: {msg_time}\n"
                    f"Link: {html.escape(link)}\n"
                    f"<pre>{preview}</pre>",
                    parse_mode="HTML",
                )
                break

    client.add_event_handler(monitor, events.NewMessage(chats=chat_ids))
    if not client.is_connected():
        await client.connect()
    asyncio.create_task(client.run_until_disconnected())

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
class AuthStates(StatesGroup):
    waiting_api_id = State()
    waiting_api_hash = State()
    waiting_phone = State()
    waiting_code = State()
    waiting_password = State()
    waiting_chats = State()
    waiting_keywords = State()


class PromoStates(StatesGroup):
    waiting_promo = State()


@dp.message_handler(commands=['help'])
async def cmd_help(message: types.Message):
    await message.answer(
        "–î–∞–Ω–Ω—ã–π –±–æ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —á–∞—Ç–∞—Ö.\n"
        "/start - –Ω–∞—á–∞—Ç—å –∏–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/login - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—á–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ\n"
        "/info - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
    )


@dp.message_handler(commands=['info'])
async def cmd_info(message: types.Message):
    data = user_data.get(str(message.from_user.id))
    if not data:
        await message.answer("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")
        return
    chats = data.get('chats') or []
    keywords = data.get('keywords') or []
    await message.answer(
        f"–ß–∞—Ç—ã: {chats}\n–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(keywords)}"
    )


@dp.message_handler(commands=['start'], state="*")
async def cmd_start(message: types.Message, state: FSMContext):
    await state.finish()
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TopGrabber ‚Äî –≤–∞—à –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ "
        "–≥–æ—Ä—è—á–∏—Ö –∏ —Ç–µ–ø–ª—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ —á–∞—Ç–∞—Ö Telegram. –ú—ã –ø–æ–º–æ–∂–µ–º –≤–∞–º –Ω–∞—Ö–æ–¥–∏—Ç—å "
        "–Ω—É–∂–Ω—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é –∏ —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å –≤–∞—à–∏ –ø—Ä–æ–¥–∞–∂–∏.\n\n"
        "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∫ –±–æ—Ç—É (https://dzen.ru/a/ZuHH1h_M5kqcam1A)"
    )
    kb = types.InlineKeyboardMarkup(row_width=1)
    kb.add(
        types.InlineKeyboardButton("–¢–∞—Ä–∏—Ñ PRO", callback_data="tariff_pro"),
        types.InlineKeyboardButton("–†–µ–∑—É–ª—å—Ç–∞—Ç", callback_data="result"),
        types.InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data="help_info"),
        types.InlineKeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="info"),
        types.InlineKeyboardButton(
            "–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤", callback_data="active_parsers"
        ),
    )
    await message.answer(text, reply_markup=kb)


@dp.callback_query_handler(lambda c: c.data == 'tariff_pro')
async def cb_tariff_pro(call: types.CallbackQuery):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
    await call.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.",
        reply_markup=markup,
    )
    await PromoStates.waiting_promo.set()
    await call.answer()


@dp.message_handler(state=PromoStates.waiting_promo)
async def promo_entered(message: types.Message, state: FSMContext):
    code = message.text.strip()
    if code.lower() == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' or not code:
        await message.answer(
            "–ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–æ–ø—É—â–µ–Ω. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ç–∞—Ä–∏—Ñ–∞ PRO.",
            reply_markup=types.ReplyKeyboardRemove(),
        )
    elif code.upper() == 'DEMO':
        await message.answer(
            "–ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–Ω—è—Ç! –í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ 7 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ PRO.",
            reply_markup=types.ReplyKeyboardRemove(),
        )
    else:
        await message.answer(
            "–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–ø–ª–∞—Ç–µ (–ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä).",
            reply_markup=types.ReplyKeyboardRemove(),
        )
    await state.finish()
    await start_login(message, state)


@dp.callback_query_handler(lambda c: c.data == 'result')
async def cb_result(call: types.CallbackQuery):
    await call.message.answer(
        "–§—É–Ω–∫—Ü–∏—è –≤—ã–¥–∞—á–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ CSV –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
    await call.answer()


@dp.callback_query_handler(lambda c: c.data == 'help_info')
async def cb_help(call: types.CallbackQuery):
    await call.message.answer(HELP_TEXT)
    await call.answer()


@dp.callback_query_handler(lambda c: c.data == 'info')
async def cb_info(call: types.CallbackQuery):
    await call.message.answer(INFO_TEXT)
    await call.answer()


@dp.callback_query_handler(lambda c: c.data == 'active_parsers')
async def cb_active_parsers(call: types.CallbackQuery):
    await call.message.answer(
        "–ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
    await call.answer()

@dp.message_handler(commands=['login'], state="*")
async def start_login(message: types.Message, state: FSMContext):
    await state.finish()
    user_id = message.from_user.id
    saved = user_data.get(str(user_id))
    if saved:
        session_name = f"session_{user_id}"
        client = TelegramClient(session_name, saved['api_id'], saved['api_hash'])
        await client.connect()
        if await client.is_user_authorized():
            user_clients[user_id] = {
                'client': client,
                'phone': saved.get('phone'),
                'phone_hash': '',
                'chats': saved.get('chats'),
                'keywords': saved.get('keywords')
            }
            if saved.get('chats') and saved.get('keywords'):
                await start_monitor(user_id)
                await message.answer("‚úÖ –ù–∞–π–¥–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω.")
                return
        await message.answer("üëã –°–µ—Å—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥. –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π *api_id* Telegram:", parse_mode="Markdown")
    else:
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π *api_id* Telegram:",
            parse_mode="Markdown"
        )
    await AuthStates.waiting_api_id.set()

@dp.message_handler(state=AuthStates.waiting_api_id)
async def get_api_id(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if not text.isdigit():
        await message.answer("‚ùó *api_id* –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:", parse_mode="Markdown")
        return
    await state.update_data(api_id=int(text))
    await message.answer("–û—Ç–ª–∏—á–Ω–æ. –í–≤–µ–¥–∏—Ç–µ *api_hash* –≤–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:", parse_mode="Markdown")
    await AuthStates.waiting_api_hash.set()

@dp.message_handler(state=AuthStates.waiting_api_hash)
async def get_api_hash(message: types.Message, state: FSMContext):
    api_hash = message.text.strip()
    if not api_hash or len(api_hash) < 5:
        await message.answer("‚ùó *api_hash* –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:", parse_mode="Markdown")
        return
    await state.update_data(api_hash=api_hash)
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ Telegram (—Å –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–º –∫–æ–¥–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä +79991234567):"
    )
    await AuthStates.waiting_phone.set()

@dp.message_handler(state=AuthStates.waiting_phone)
async def get_phone(message: types.Message, state: FSMContext):
    phone = message.text.strip()
    data = await state.get_data()
    api_id = data.get('api_id')
    api_hash = data.get('api_hash')
    user_id = message.from_user.id
    session_name = f"session_{user_id}"

    try:
        client = TelegramClient(session_name, api_id, api_hash)
        await client.connect()
        result = await client.send_code_request(phone)
        phone_hash = result.phone_code_hash
    except PhoneNumberInvalidError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ:")
        return
    except FloodWaitError as e:
        await message.answer(f"‚ö†Ô∏è Telegram –ø—Ä–æ—Å–∏—Ç –ø–æ–¥–æ–∂–¥–∞—Ç—å {e.seconds} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π.")
        await state.finish()
        return
    except Exception as e:
        logging.exception(e)
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–æ–¥–∞: {e}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start.")
        await state.finish()
        return

    user_clients[user_id] = {
        'client': client,
        'phone': phone,
        'phone_hash': phone_hash,
        'chats': None,
        'keywords': None
    }
    user_data[str(user_id)] = {
        'api_id': api_id,
        'api_hash': api_hash,
        'phone': phone,
        'chats': None,
        'keywords': None
    }
    save_user_data(user_data)
    await state.update_data(phone=phone)

    await message.answer(
        "üì± –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥, *–≤—Å—Ç–∞–≤–ª—è—è –ª—é–±—ã–µ —Å–∏–º–≤–æ–ª—ã* (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–±–µ–ª—ã –∏–ª–∏ –¥–µ—Ñ–∏—Å—ã) –º–µ–∂–¥—É —Ü–∏—Ñ—Ä–∞–º–∏."
        " –Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–±–µ—Ä—É –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã.",
        parse_mode="Markdown"
    )
    await AuthStates.waiting_code.set()

@dp.message_handler(state=AuthStates.waiting_code)
async def get_code(message: types.Message, state: FSMContext):
    raw = message.text.strip()
    code = re.sub(r'\D', '', raw)
    user_id = message.from_user.id
    client_info = user_clients.get(user_id)

    if not client_info:
        await message.answer("‚ö†Ô∏è –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ /start.")
        await state.finish()
        return

    client = client_info['client']
    phone = client_info['phone']
    phone_hash = client_info['phone_hash']

    try:
        await client.sign_in(phone=phone, code=code, phone_code_hash=phone_hash)
    except PhoneCodeInvalidError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, –≤—Å—Ç–∞–≤–∏–≤ —Å–∏–º–≤–æ–ª—ã –º–µ–∂–¥—É —Ü–∏—Ñ—Ä–∞–º–∏:")
        return
    except PhoneCodeExpiredError:
        await message.answer(
            "‚ùå –ö–æ–¥ –∏—Å—Ç—ë–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥–æ–π /start –∏ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥."
        )
        await state.finish()
        return
    except SessionPasswordNeededError:
        await message.answer("üîí –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞—â–∏—â—ë–Ω –ø–∞—Ä–æ–ª–µ–º. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
        await AuthStates.waiting_password.set()
        return
    except Exception as e:
        logging.exception(e)
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: {e}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start.")
        await state.finish()
        return

    await message.answer(
        "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ *—Å—Å—ã–ª–∫–∏* –Ω–∞ —á–∞—Ç—ã –∏–ª–∏ –∫–∞–Ω–∞–ª—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."
        " –ü—Ä–∏–º–µ—Ä—ã: `https://t.me/username` –∏–ª–∏ `t.me/username`. –ß–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ –∑–∞–ø—è—Ç—É—é:",
        parse_mode="Markdown"
    )
    await AuthStates.waiting_chats.set()

@dp.message_handler(state=AuthStates.waiting_password)
async def get_password(message: types.Message, state: FSMContext):
    password = message.text.strip()
    user_id = message.from_user.id
    client_info = user_clients.get(user_id)

    if not client_info:
        await message.answer("‚ö†Ô∏è –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ /start.")
        await state.finish()
        return

    client = client_info['client']
    try:
        await client.sign_in(password=password)
    except Exception as e:
        logging.exception(e)
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return

    await message.answer(
        "‚úÖ –ü–∞—Ä–æ–ª—å –ø—Ä–∏–Ω—è—Ç! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ *—Å—Å—ã–ª–∫–∏* –Ω–∞ —á–∞—Ç—ã –∏–ª–∏ –∫–∞–Ω–∞–ª—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ –∑–∞–ø—è—Ç—É—é):",
        parse_mode="Markdown"
    )
    await AuthStates.waiting_chats.set()

@dp.message_handler(state=AuthStates.waiting_chats)
async def get_chats(message: types.Message, state: FSMContext):
    text = message.text.strip().replace(',', ' ')
    parts = [p for p in text.split() if p]
    user_id = message.from_user.id
    client = user_clients[user_id]['client']
    chat_ids = []

    for part in parts:
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Å—É—â–Ω–æ—Å—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ –∏–ª–∏ username
            entity = await client.get_entity(part)
            chat_ids.append(entity.id)
        except Exception:
            if part.isdigit():
                chat_ids.append(int(part))
            else:
                await message.answer(
                    "‚ö†Ô∏è –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤ –∞–∫–∫–∞—É–Ω—Ç–µ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏." )
                return

    if not chat_ids:
        await message.answer("‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫. –í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Å—ã–ª–∫—É –∏–ª–∏ ID:")
        return

    user_clients[user_id]['chats'] = chat_ids
    await state.update_data(chat_ids=chat_ids)
    if str(user_id) in user_data:
        user_data[str(user_id)]['chats'] = chat_ids
        save_user_data(user_data)

    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):")
    await AuthStates.waiting_keywords.set()

@dp.message_handler(state=AuthStates.waiting_keywords)
async def get_keywords(message: types.Message, state: FSMContext):
    keywords = [w.strip().lower() for w in message.text.split(',') if w.strip()]
    if not keywords:
        await message.answer("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–ª–æ–≤–æ:")
        return

    user_id = message.from_user.id
    user_clients[user_id]['keywords'] = keywords
    if str(user_id) in user_data:
        user_data[str(user_id)]['keywords'] = keywords
        save_user_data(user_data)

    await start_monitor(user_id)

    await message.answer("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω! –Ø —É–≤–µ–¥–æ–º–ª—é –≤–∞—Å –æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è—Ö.")
    await state.finish()

if __name__ == '__main__':
    print("Bot is starting...")
    executor.start_polling(dp, skip_updates=True)
